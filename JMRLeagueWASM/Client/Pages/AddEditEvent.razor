@page "/AddEditEvent"
@page "/AddEditEvent/{EventId:int}"
@using JMRLeague.Shared
@using System.ComponentModel.DataAnnotations
@inject JMRLeague.Shared.Services.ITeamsService marbleTeamService
@inject JMRLeague.Shared.Services.IMarbleEventsService marbleEventsService

<h3>Add Event</h3>


<EditForm Model="@MarbleEvent" OnSubmit="HandleSubmit">
    <table class="table">
        <tr>
        <td><label for="name">Name</label></td>
        <td><InputText id="name" @bind-Value="MarbleEvent.Name" class="form-control-sm" /></td>
        </tr>
        <tr>
            <td>
                <label for="date">Date</label>
            </td>
            <td>
                <InputDate id="date" @bind-Value="MarbleEvent.Date" class="form-control-sm" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="url">URL</label>
            </td>
            <td><InputText id="url" @bind-Value="MarbleEvent.URL" class="form-control-sm" /></td>
        </tr>


        @if (MarbleEvent.Scores != null)
        {
            @foreach (var scoreData in MarbleEvent.Scores)
            {
                <tr>
                    <td>
                        <label for="@scoreData.TeamName">@scoreData.TeamName</label>
                    </td>
                    <td>
                        <InputNumber TValue="int" id="@scoreData.TeamName" class="form-control-sm" @bind-Value="scoreData.Score" />
                    </td>
                </tr>
            }
        }

    </table>



    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>




@code {
    [Parameter]
    public int EventId { get; set; } = 0;

    public MarbleEventDataEntry MarbleEvent { get; set; } = new MarbleEventDataEntry
    {
        Date = DateTime.Today
    };


    public MarbleTeams MarbleTeams { get; set; }


    protected override async Task OnInitializedAsync()
    {
        MarbleTeams = await marbleTeamService.GetTeams();
        MarbleEvent.Scores = new ScoreData[MarbleTeams.Teams.Count()];

        for (int i = 0; i < MarbleTeams.Teams.Count(); i++)
        {
            MarbleEvent.Scores[i] = new ScoreData
            {
                TeamId = MarbleTeams.Teams[i].Id,
                TeamName = MarbleTeams.Teams[i].Name
            };
        }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("Handle Submit");
    }

    public class MarbleEventDataEntry
    {
        public string Name;
        public string URL;
        public DateTime Date;
        public ScoreData[] Scores;
    }

    public class ScoreData
    {
        public int TeamId;
        public string TeamName;
        public int Score;
    }
}
